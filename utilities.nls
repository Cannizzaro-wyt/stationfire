to master-run ; runs the whole simulation for 200 seconds and then exports results
  setup
  while [ticks < 200]
  [carefully [go]
    [ask people [preferreddirection] go]]
  export-results
end

to run-environment-only ; runs the simulation without people
  ask people [die]
  while [ticks < 200] [
  tick ; makes one second of time pass
  ;Windows are turned into exits based on timings provided by NIST Documentation
  ;Windows are then recolored to represent exits
  if ticks = 94 [ ask windows with [who = 57 or who = 34] [ set breed exits set color hsb  0  50 100]]
  if ticks = 105 [ ask windows with [who = 59] [ set breed exits set color hsb  0  50 100]]
    recolor-patches]
end

to profile-setup ; profiles the setup
  clear-all
  profiler:start ; doesn't differentiate between full and small scale - that has to be manually selected before running
  setup
  profiler:stop
  print profiler:report
end

to profile
  profiler:start         ;; start profiling
repeat 1 [ go ]       ;; run something you want to measure
profiler:stop          ;; stop profiling
print profiler:report
end

to-report intersects-here [ variety ]
   ;; each pair of segments checks for intersections
   let result intersection self myself
  let intersect-here not empty? result
  ask variety [
    if not empty? result []
      ]
  report intersect-here
end

;; reports a two-item list of x and y coordinates, or an empty
;; list if no intersection is found
to-report intersection [t1 t2]
  let m1 [tan (90 - heading)] of t1
  let m2 [tan (90 - heading)] of t2
  ;; treat parallel/collinear lines as non-intersecting
  if m1 = m2 [ report [] ]
  ;; is t1 vertical? if so, swap the two turtles
  if abs m1 = tan 90
  [
    ifelse abs m2 = tan 90
      [ report [] ]
      [ report intersection t2 t1 ]
  ]
  ;; is t2 vertical? if so, handle specially
  if abs m2 = tan 90 [
     ;; represent t1 line in slope-intercept form (y=mx+c)
      let c1 [ycor - xcor * m1] of t1
      ;; t2 is vertical so we know x already
      let x [xcor] of t2
      ;; solve for y
      let y m1 * x + c1
      ;; check if intersection point lies on both segments
      if not [x-within? x] of t1 [ report [] ]
      if not [y-within? y] of t2 [ report [] ]
      report list x y
  ]
  ;; now handle the normal case where neither turtle is vertical;
  ;; start by representing lines in slope-intercept form (y=mx+c)
  let c1 [ycor - xcor * m1] of t1
  let c2 [ycor - xcor * m2] of t2
  ;; now solve for x
  let x (c2 - c1) / (m1 - m2)
  ;; check if intersection point lies on both segments
  if not [x-within? x] of t1 [ report [] ]
  if not [x-within? x] of t2 [ report [] ]
  report list x (m1 * x + c1)
end

to-report x-within? [x]  ;; turtle procedure
  report abs (xcor - x) <= abs (size / 2 * dx)
end

to-report y-within? [y]  ;; turtle procedure
  report abs (ycor - y) <= abs (size / 2 * dy)
end
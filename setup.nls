to read-fire-from-file [ filename]
  ;;header: x y time
  let values bf csv:from-file filename
  foreach values
  [ [row] ->
    create-fires 1
    [
      setxy item 0 row item 1 row
      set arrival item 2 row
      set color blue
    ]
  ]
end
to read-building-from-file [filename]
  let values bf csv:from-file filename
  foreach values
  [ [row] ->
    let breed-name item 0 row
    let x1 item 1 row
    let y1 item 2 row
    let x2 item 3 row
    let y2 item 4 row
    let component nobody
    if breed-name = "Wall" [ create-walls 1 [set component self]]
    if breed-name = "Exit" [ create-exits 1 [set component self]]
    if breed-name = "Window" [ create-windows 1 [set component self]]
    ask component [ setxy ((x1 + x2) / 2) (y1 + y2) / 2]
    ask component [ facexy x1 y1]
    ;ask component [ set label (word x1)]
    ask component [ set size distancexy x1 y1 + distancexy x2 y2]
    ask component [ set first-end (list x1 y1)]
    ask component [ set second-end (list x2 y2)]
  ]
end
to read-people-from-file [filename] ; information was encoded in a CSV based on interview data and organized by Database Codebook
  let rows bf csv:from-file filename
  foreach rows
  [[row] ->
    create-people 1
    [
     set size .46
     setxy (item 0 row) (item 1 row) ; initial position, randomized within an ecology that patrons had reported when interviewd
     set age (item 2 row)
     set gender (item 3 row)
     set visited? (item 4 row) ;true or false
     set group-number (item 6 row) ; people were assigned group numbers based on the people they came with
     set group-type (item 7 row) ; based on composition of group
  ]]
end

;;whether the patch is in the building or outside of the building
to read-patch-labels-from-file [filename]
   let rows bf csv:from-file filename
   foreach rows
   [[row] ->
     ask patch (item 0 row) (item 1 row)
     [
       set inside-building? (item 2 row)
       ifelse inside-building? 
       [set pcolor black]
       [set pcolor black] 
     ]
  ]
end

to soclink ;groups that came together have links based type of relationship
ask people [if group-type < 0 ;type 0 is 'alone'
 [
if group-type = 1 [ask other people with [group-number = [group-number] of myself] [create-coworker-with myself]]
if group-type = 2 [ask other people with [group-number = [group-number] of myself] [create-friend-with myself]]
if group-type = 3 [ask other people with [group-number = [group-number] of myself] [create-partner-with myself]]
if group-type = 4 [ask other people with [group-number = [group-number] of myself] [create-family-with myself]]
if group-type = 5 [ask other people with [group-number = [group-number] of myself] [create-multiple-with myself]]
 ]]
  ask links [hide-link]
end

to setspeed ; currently not used in movement, but based on an article by Isobe that looked at maximum standard walking paces, units are m/s
  ask people [set speed 1.1 + random-float .2]
end